

///////////////////////////////////////////////////    three method //////////////////////////////////////////////////////

/////////////////////////////////first method  (using class concept)
#include <iostream>
#include <list>
#include <unordered_map>
using namespace std;

class Graph {
public:
    void addEdge(int v1, int v2);
    void printGraph();

private:
    unordered_map<int, list<int>> adjacencyList;
};

addEdge(int v1, int v2) {
    // Add edge v1 -> v2
    adjacencyList[v1].push_back(v2);

    // Since it's an undirected graph, add edge v2 -> v1 as well
    adjacencyList[v2].push_back(v1);
}

printGraph() {
    for (const auto& pair : adjacencyList) {
        int vertex = pair.first;
        const list<int>& neighbors = pair.second;

        cout << "Vertex " << vertex << " is connected to: ";
        for (int neighbor : neighbors) {
            cout << neighbor << " ";
        }
        cout <<endl;
    }
}

int main() {
    Graph graph;

    // Adding edges to the graph
    graph.addEdge(1, 2);
    graph.addEdge(1, 3);
    graph.addEdge(2, 3);
    graph.addEdge(2, 4);
    graph.addEdge(3, 4);

    // Printing the adjacency list representation of the graph
    graph.printGraph();

    return 0;
}
////////////////////////////////////////// (second method ( using function method ) //////////////////////////////////////////////////////////////////////////////////
#include <iostream>
#include <list>
#include <map>

void addEdge(std::map<int, std::list<int>>& graph, int v1, int v2) {
    graph[v1].push_back(v2);
    graph[v2].push_back(v1);
}

void printGraph(const std::map<int, std::list<int>>& graph) {
    for (const auto& pair : graph) {
        int vertex = pair.first;
        const std::list<int>& neighbors = pair.second;

        std::cout << "Vertex " << vertex << " is connected to: ";
        for (int neighbor : neighbors) {
            std::cout << neighbor << " ";
        }
        std::cout << std::endl;
    }
}

int main() {
    std::map<int, std::list<int>> graph;

    addEdge(graph, 1, 2);
    addEdge(graph, 1, 3);
    addEdge(graph, 2, 3);
    addEdge(graph, 2, 4);
    addEdge(graph, 3, 4);

    printGraph(graph);

    return 0;
}




///////////////////////////////third method/////////////////////////////////////////////////////////////////////////////
#include <iostream>
#include <vector>
#include <unordered_set>
#include <map>
#include<unordered_map>
#include <algorithm>
#include <string>
#include <set>
#include<list>
using namespace std;


struct graph
{
    unordered_map< int ,list<int> > adj;
    
    void addedge(int u, int v, bool direction)
    {
        adj[u].push_back(v);

        if(direction==0)
        {
            adj[v].push_back(u);
        }
    }

    void printdata()
    {
        for(auto element: adj)
        {
            cout<<element.first<<"->";
            for(auto i:element.second)
            {
                cout<<i<<",";
            }

            cout<<endl;
        }
    }
    
    
};

int main()
{
    int n,m;
    cout<<"no of node :";
    cin>>n;
    cout<<"no of side :";
    cin>>m;

    graph g;
    
    for(int i=0;i<m;i++)
    {
        int u,v;
        cin>>u>>v;

        g.addedge(u,v,0);
    }

    g.printdata();
}
